{"version":3,"sources":["SeasonDisplay.js","Loader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","class","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"+LAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,uBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,oBACNC,SAAU,eAyBCE,EAbO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAGJP,EAAaS,GAAhCP,EAHuB,EAGvBA,KAAMC,EAHiB,EAGjBA,SAEd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,oBAAeT,EAAf,mBACZ,4BAAKD,GACL,uBAAGU,UAAS,qBAAgBT,EAAhB,qBC7BZU,EAAS,SAACP,GACd,OACE,yBAAKQ,MAAM,oBACT,yBAAKA,MAAM,kBAAkBR,EAAMS,WAKzCF,EAAOG,aAAe,CACpBD,QAAS,cAGIF,QCTTI,E,4MACJC,MAAQ,CAAEX,IAAK,KAAMY,aAAc,I,kEAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAElB,IAAKiB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2CAI7Cc,QAAQC,IAAI,uB,sCAIZ,OAAIC,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMX,IAClC,uCAAawB,KAAKb,MAAMC,eAE5BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMX,IAClC,kBAAC,EAAD,CAAeA,IAAKwB,KAAKb,MAAMX,MAEjC,kBAAC,EAAD,CAAQQ,QAAQ,qC,+BAIvB,OAAO,6BAAMgB,KAAKC,qB,GAxBJC,IAAMC,WA2BxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.6b483a26.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach!\",\n    iconName: \"sun\",\n  },\n  winter: {\n    text: \"burr it's chilly!\",\n    iconName: \"snowflake\",\n  },\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const icon = season === \"winter\" ? \"snowflake\" : \"sun\";\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left ${iconName} icon massive`} />\n      <h1>{text}</h1>\n      <i className={`icon-right ${iconName} icon massive`} />\n    </div>\n  );\n};\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Loader = (props) => {\n  return (\n    <div class=\"ui active dimmer\">\n      <div class=\"ui text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nLoader.defaultProps = {\n  message: \"Loading...\",\n};\n\nexport default Loader;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Loader from \"./Loader\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: \"\" };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (err) => this.setState({ errorMessage: err.message })\n    );\n  }\n  componentDidUpdate() {\n    console.log(\"component updated\");\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n    return <Loader message=\"Please accept location request\" />;\n  }\n\n  render() {\n    return <div>{this.renderContent()}</div>;\n  }\n}\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}